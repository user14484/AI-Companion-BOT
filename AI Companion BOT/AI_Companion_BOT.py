#from collections import UserString
#from aiogram import Bot, types
#from aiogram.dispatcher import Dispatcher
#from aiogram.utils import executor
#from ChatGPT import ChatGPT
#from DataBase import DataBase
from config import *
from TelegramBot import *

telegram_bot = TelegramBot(BOT_API_TOKEN, CHAT_GPT_LIST, DATABASE, NAME_BOT_COMMAND)


<<<<<<< HEAD
#bot = Bot(token=BOT_API_TOKEN)
#chatgpt = ChatGPT(CHAT_API_TOKEN)
#database = DataBase(DATABASE)
#dp = Dispatcher(bot)
=======
bot = Bot(token=BOT_API_TOKEN)
chatgpt = ChatGPT(CHAT_GPT_LIST)
database = DataBase(DATABASE)
dp = Dispatcher(bot)
>>>>>>> 9c562c38209262513d70479926ebf0f6fb4f488b


## –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –ë–î:
#def RegisterUser(username, userid, firstname, lastname, banned=0, is_spam=1):
#    userdata = database.query(f"SELECT * FROM users WHERE userid={userid}")
#    if len(userdata) <= 0:
#        database.query(f"INSERT INTO users (username, userid, firstname, lastname, banned, is_spam) VALUES('{username}', '{userid}', '{firstname}', '{lastname}', {banned}, {is_spam})", commit=True)

#def CheckUser(userid):
#    userdata = database.query(f"SELECT * FROM users WHERE userid={userid}")
#    if len(userdata) <= 0:
#        return False
#    else:
#        return True

## –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
#@dp.message_handler(commands=['start'])
#async def process_start_command(message: types.Message):
#    userid = message.from_user.id
#    username = message.from_user.username
#    firstname = message.from_user.first_name
#    lastname = message.from_user.last_name
#    if(not CheckUser(userid)):
#        RegisterUser(username, userid, firstname, lastname)
#    await message.reply("ChatGPT:\n–ü–µ—Ä–µ–¥ –í–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º –í—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: –ò–≤–∞–Ω–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: - –ò–≤–∞–Ω–æ–≤, –∫–∞–∫–∏–µ 5 —Ñ–∏–ª—å–º–æ–≤ —Å–µ–π—á–∞—Å –ø–æ–ø—É–ª—è—Ä–Ω—ã?'")

#@dp.message_handler(commands=['pay'])
#async def pay_command_handler(message: types.Message):
#    inline_kb = types.InlineKeyboardMarkup()
#    inline_btn = types.InlineKeyboardButton(text='–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', url='https://www.sberbank.com/ru/person/dl/jc?linkname=au2IMrzvmC3v5kVza')
#    inline_kb.add(inline_btn)
#    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç, –æ–ø–ª–∞—Ç–∏–≤ —Ç–∞—Ä–∏—Ñ '–ü–ª—é—Å—å' –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=inline_kb)

<<<<<<< HEAD
#users = {}
#messages = {}

##–ó–∞–ø—Ä–æ—Å –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:
#@dp.message_handler(commands=['info'])
#async def me(message: types.Message):
#    user_id = message.from_user.id
#    if user_id not in users:
#        users[user_id] = {'balance': 10}
#    text = f"üñ• –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\nüÜî –í–∞—à ID: {user_id};\nüôã‚Äç‚ôÇÔ∏è –í–∞—à–µ –∏–º—è: {message.from_user.username};\n\nüí∞ –û—Å—Ç–∞–ª–æ—Å—å: {users[user_id]['balance']} —Ç–æ–∫–µ–Ω–æ–≤;"
#    await bot.send_message(chat_id=message.chat.id, text=text, reply_to_message_id=message.message_id)
=======
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    try:
        userid = message.from_user.id
        username = message.from_user.username
        firstname = message.from_user.first_name
        lastname = message.from_user.last_name
        if(not CheckUser(userid)):
            RegisterUser(username, userid, firstname, lastname)
        await message.reply("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç, –º–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–∞—Ç—å—Å—è —Å –Ω–∏–º!")
    except:
        return

@dp.message_handler(commands=['clear'])
async def process_start_command(message: types.Message):
    user_id = message.from_user.id
    CheckUser(user_id)
    #users[user_id]['chat_history'] = []
    print(f"@{message.from_user.username} –û—Ç—á–∏—Å—Ç–∏–ª –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
    await message.reply("–ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—á–∏—â–µ–Ω–∞!")
>>>>>>> 9c562c38209262513d70479926ebf0f6fb4f488b

## –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:
#@dp.message_handler(commands=['clear'])
#async def process_clear_command(message: types.Message):
#    user_id = message.from_user.id
#    CheckUser(user_id)
#    UserString[user_id]['chat_history'] = []
#    await message.answer("–ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—á–∏—â–µ–Ω–∞!")
#    print(f"@{message.from_user.username} –û—á–∏—Å—Ç–∏–ª –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")

#last_request = {}

#@dp.message_handler()
#async def echo_message(message: types.Message):
#    message_id = message.message_id
#    rq = message.text
#    userid = message.from_user.id
#    username = message.from_user.username
#    firstname = message.from_user.first_name
#    lastname = message.from_user.last_name
#    if not CheckUser(userid):
#        RegisterUser(username, userid, firstname, lastname)

<<<<<<< HEAD
#    # –ê–Ω–∏–º–∞—Ü–∏—è "–ü–µ—á–∞—Ç–∞–µ—Ç":
#    await bot.send_chat_action(chat_id=message.chat.id, action='typing')

#    # –ï—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å:
#    if rq in last_request and last_request[rq] == userid:
#        await bot.send_message(chat_id=message.chat.id, text="–í—ã —É–∂–µ —ç—Ç–æ –≥–æ–≤–æ—Ä–∏–ª–∏...", reply_to_message_id=message_id)
#        return
    
#    # –° –∑–∞–ø—Ä–æ—Å–æ–º –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ "–ò–≤–∞–Ω–æ–≤":
#    if '–ò–≤–∞–Ω–æ–≤' in rq or '–ò–≤–∞–Ω–æ–≤,' in rq:
#        generated_text = chatgpt.getAnswer(message=rq, lang="ru", temperature=0.7, max_tokens=2000)
#        await bot.send_message(chat_id=message.chat.id, text=generated_text, reply_to_message_id=message_id)
#        print(f"(@{username} -> bot): {rq}\n(bot -> @{username}): {generated_text}")

#    # –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é:
#    if message.text in ['–°–ø–∞—Å–∏–±–æ!', '–ë–ª–∞–≥–æ–¥–∞—Ä—é!', '–ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤—É—é!', '–ú–µ—Ä—Å–∏!', '–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ!', '–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ', '–°–ø–∞—Å–∏–±–æ', '–ë–ª–∞–≥–æ–¥–∞—Ä—é', '–ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤—É—é', '–ú–µ—Ä—Å–∏', '–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ', '–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ', '–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ,', '–°–ø–∞—Å–∏–±–æ,', '–ë–ª–∞–≥–æ–¥–∞—Ä—é,', '–ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤—É—é,', '–ú–µ—Ä—Å–∏,', '–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ,', '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç', '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!', '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!', '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.']:
#        if message.reply_to_message and message.reply_to_message.from_user.username:
#            recipient_username = message.reply_to_message.from_user.username
#            await bot.send_message(chat_id=message.chat.id, text=f"‚ù§Ô∏è @{username} –≤—ã—Ä–∞–∑–∏–ª(–∞) –í–∞–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å!", reply_to_message_id=message.reply_to_message.message_id)

#    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞:
#if __name__ == '__main__':
#    executor.start_polling(dp)
=======
    msg = await bot.send_message(message.from_user.id, "‚è≥ –ë–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç...", reply_to_message_id=message_id)
    generated_text = chatgpt.getAnswer(message=rq, lang="ru", temperature=0.7, max_tokens=1000)
    result = "";
    for key in generated_text.keys():
        result += f"\n{key} = {generated_text[key]}"
    await bot.edit_message_text(chat_id=userid, message_id=msg["message_id"], text=result)
    print(f"(@{message.from_user.username} -> bot): {rq}\n(bot -> @{message.from_user.username}): {generated_text['message']}")

if __name__ == '__main__':
    executor.start_polling(dp)
>>>>>>> 9c562c38209262513d70479926ebf0f6fb4f488b
