<<<<<<< HEAD
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from ChatGPT import ChatGPT
from DataBase import DataBase
from lang import *

class TelegramBot:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    def __init__(self, api_key_tg, api_keys_gpt, database_file, name_bot_command):
        self.bot = Bot(token=api_key_tg)
        self.chatgpt = ChatGPT(api_keys_gpt)
        self.database = DataBase(database_file)
        self.dp = Dispatcher(self.bot)
        self.name_bot_command = name_bot_command


        self.dp.message_handler(commands=["start"])(self.process_start_command)
        self.dp.message_handler(commands=["pay"])(self.pay_command_handler)
        self.dp.message_handler(commands=["info"])(self.info_command_handler)
        self.dp.message_handler(commands=["admin"])(self.admin_command_handler)
        self.dp.message_handler(commands=["test"])(self.test_command_handler)
        self.dp.message_handler()(self.echo_message)
        self.dp.callback_query_handler(lambda call: call.data == 'admin_give_money')(self.admin_give_money)
        self.dp.callback_query_handler(lambda call: call.data == 'admin_add_tokens')(self.admin_add_tokens)

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        executor.start_polling(self.dp)

    # –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
    def RegisterUser(self, username, userid, firstname, lastname, banned=0, is_spam=1, balance=0, lang='ru', tokens=500):
        try:
            userdata = self.database.query(f"SELECT * FROM users WHERE userid='{userid}'")
            if len(userdata) <= 0:
                self.database.query(f"INSERT INTO users (username, userid, firstname, lastname, banned, is_spam) VALUES('{username}', '{userid}', '{firstname}', '{lastname}', {banned}, {is_spam})", commit=True)
                self.database.query(f"INSERT INTO settings (userid, balance, lang, tokens) VALUES('{userid}', {balance}, '{lang}', {tokens})", commit=True)
                return True
            return False
        except:
            return False

    # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    def CheckUser(self, userid):
        userdata = self.database.query(f"SELECT * FROM users WHERE userid='{userid}'")
        if len(userdata) <= 0:
            return False
        else:
            return True

    # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤—ã—á–∏—Ç–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    def CheckTokens(self, userid, text):
        userdata = self.database.query(f"SELECT * FROM settings WHERE userid='{userid}'")
        
        tokens = text.split()
        num_tokens = len(tokens)

        if(num_tokens > userdata["tokens"]):
            return False
        
        self.database.query(f"UPDATE settings SET tokens={int(userdata['tokens']) - num_tokens} WHERE userid='{userid}'", commit=True)
        return True
    
    # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
    async def process_start_command(self, message: types.Message):
        userid = message.from_user.id
        username = message.from_user.username
        firstname = message.from_user.first_name
        lastname = message.from_user.last_name

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É –≤ –ë–î, —Ç–æ  —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ
        if(not self.CheckUser(userid)):
            self.RegisterUser(username, userid, firstname, lastname)
        await message.reply(lang['RU_COMMAND_START'].format(bot_name=self.name_bot_command))

    # –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /pay
    async def pay_command_handler(self, message: types.Message):
        inline_kb = types.InlineKeyboardMarkup()
        inline_btn = types.InlineKeyboardButton(text='–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', url='https://www.sberbank.com/')
        inline_kb.add(inline_btn)
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç, –æ–ø–ª–∞—Ç–∏–≤ —Ç–∞—Ä–∏—Ñ '–ü–ª—é—Å' –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=inline_kb)

    def GetUserSettings(self, userid):
        userdata = self.database.query(f"SELECT * FROM settings WHERE userid={userid}")
        if len(userdata) <= 0:
            return {"result": userdata, "error": False}
        else:
            return {"result": userdata, "error": True}

    # –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /info
    async def info_command_handler(self, message: types.Message):
        user_id = message.from_user.id
        settings_user = self.GetUserSettings(user_id)

        if(settings_user["error"]):
            settings_user = settings_user["result"]
        else:
            return

        balance = settings_user["balance"]
        lang = settings_user["lang"]
        tokens = settings_user["tokens"]
        text = f"üñ• –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\nüÜî –í–∞—à ID: {user_id};\nüôã‚Äç‚ôÇÔ∏è –í–∞—à–µ –∏–º—è: {message.from_user.username};\n\nüí∞ –û—Å—Ç–∞–ª–æ—Å—å: {balance}‚ÇΩ ~ {tokens} —Ç–æ–∫–µ–Ω–æ–≤;"
        await self.bot.send_message(chat_id=message.chat.id, text=text, reply_to_message_id=message.message_id)

    # –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    async def echo_message(self, message: types.Message):
        message_id = message.message_id
        rq = message.text
        userid = message.from_user.id
        username = message.from_user.username
        firstname = message.from_user.first_name
        lastname = message.from_user.last_name
        if not self.CheckUser(userid):
            self.RegisterUser(username, userid, firstname, lastname)

        me = await self.bot.get_me()

        # –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é:
        if rq in ['–°–ø–∞—Å–∏–±–æ!', '–ë–ª–∞–≥–æ–¥–∞—Ä—é!', '–ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤—É—é!', '–ú–µ—Ä—Å–∏!', '–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ!', '–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ', '–°–ø–∞—Å–∏–±–æ', '–ë–ª–∞–≥–æ–¥–∞—Ä—é', '–ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤—É—é', '–ú–µ—Ä—Å–∏', '–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ', '–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ', '–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ,', '–°–ø–∞—Å–∏–±–æ,', '–ë–ª–∞–≥–æ–¥–∞—Ä—é,', '–ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤—É—é,', '–ú–µ—Ä—Å–∏,', '–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ,', '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç', '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!', '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!', '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.']:
            if message.reply_to_message and message.reply_to_message.from_user.username:
                #recipient_username = message.reply_to_message.from_user.username
                await self.bot.send_message(chat_id=message.chat.id, text=f"‚ù§Ô∏è @{me.username} –≤—ã—Ä–∞–∑–∏–ª(–∞) –í–∞–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å!", reply_to_message_id=message.reply_to_message.message_id)
                print(f"(@{username} -> bot): {rq}\n(bot -> @{username}): ‚ù§Ô∏è @{me.username} –≤—ã—Ä–∞–∑–∏–ª(–∞) –í–∞–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å!")
                return

        # –ê–Ω–∏–º–∞—Ü–∏—è "–ü–µ—á–∞—Ç–∞–µ—Ç":
        await self.bot.send_chat_action(chat_id=message.chat.id, action='typing')
    
        # –° –∑–∞–ø—Ä–æ—Å–æ–º –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ "–ò–≤–∞–Ω–æ–≤":
        if self.name_bot_command in rq or f'{self.name_bot_command},' in rq:
            if(self.CheckTokens(userid, rq)):
                generated_text = self.chatgpt.getAnswer(message=rq, lang="ru", temperature=0.7, max_tokens=1000)
                await self.bot.send_message(chat_id=message.chat.id, text=generated_text["message"], reply_to_message_id=message_id)
                print(f"(@{username} -> bot): {rq}\n(bot -> @{username}): {generated_text['message']}")
            else:
                await self.bot.send_message(chat_id=message.chat.id, text="–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å!", reply_to_message_id=message_id)
                print(f"(@{username} -> bot): {rq}\n(bot -> @{username}): –£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å!")


    def is_user_admin(self, user_id):
        try:
            userdata = self.database.query(f"SELECT * FROM users WHERE userid={user_id}")
            if len(userdata) > 0 and userdata['admin'] == 1:
                return True
            return False
        except:
            return False

    # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã /test
    async def test_command_handler(self, message: types.Message):
        message_id = message.message_id
        rq = message.text
        userid = message.from_user.id
        username = message.from_user.username
        firstname = message.from_user.first_name
        lastname = message.from_user.last_name

        user, money = message.get_args().split()

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É –≤ –ë–î, —Ç–æ  —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ
        if(not self.CheckUser(userid)):
            self.RegisterUser(username, userid, firstname, lastname)
        await self.bot.send_message(chat_id=message.chat.id, text=f"user = {user}\nmoney = {money}", reply_to_message_id=message_id)

    # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã /admin
    async def admin_command_handler(self, message: types.Message):
        message_id = message.message_id
        rq = message.text
        userid = message.from_user.id
        username = message.from_user.username
        firstname = message.from_user.first_name
        lastname = message.from_user.last_name

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É –≤ –ë–î, —Ç–æ  —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ
        if(not self.CheckUser(userid)):
            self.RegisterUser(username, userid, firstname, lastname)
        await self.bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_to_message_id=message_id, reply_markup=self.admin_buttons())

    # –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∫–∏
    def admin_buttons(self):
        buttons = types.InlineKeyboardMarkup(row_width=2)
        buttons.add(
            types.InlineKeyboardButton(text="–í—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏", callback_data='admin_give_money'),
            types.InlineKeyboardButton(text="–í—ã–¥–∞—Ç—å —Ç–æ–∫–µ–Ω—ã", callback_data='admin_add_tokens')
            )
        buttons.row(
            types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞", callback_data='admin_spam')
            )
        buttons.row(
            types.InlineKeyboardButton(text="–ó–∞–±–∞–Ω–∏—Ç—å", callback_data='admin_ban')
            )
        return buttons

    # –§—É–Ω–∫—Ü–∏—è –ø–æ –≤—ã–¥–∞—á–µ –¥–µ–Ω–µ–≥
    async def admin_give_money(self, call: types.CallbackQuery):
        await self.bot.send_message(chat_id=call.message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç–µ: <code>/money @username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code>", parse_mode='HTML')

    # –§—É–Ω–∫—Ü–∏—è –ø–æ –≤—ã–¥–∞—á–µ –¥–µ–Ω–µ–≥
    async def admin_add_tokens(self, call: types.CallbackQuery):
        await self.bot.send_message(chat_id=call.message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç–µ: <code>/money @username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code>", parse_mode='HTML')
=======
from collections import UserString
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from ChatGPT import ChatGPT
from DataBase import DataBase
from lang import *

class TelegramBot:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    def __init__(self, api_key_tg, api_keys_gpt, database_file, name_bot_command):
        self.bot = Bot(token=api_key_tg)
        self.chatgpt = ChatGPT(api_keys_gpt)
        self.database = DataBase(database_file)
        self.dp = Dispatcher(self.bot)
        self.name_bot_command = name_bot_command


        self.dp.message_handler(commands=["start"])(self.process_start_command)
        self.dp.message_handler(commands=["pay"])(self.pay_command_handler)
        self.dp.message_handler(commands=["info"])(self.info_command_handler)
        self.dp.message_handler()(self.echo_message)

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        executor.start_polling(self.dp)

    # –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
    def RegisterUser(self, username, userid, firstname, lastname, banned=0, is_spam=1, balance=0, lang='ru', tokens=0):
        try:
            userdata = self.database.query(f"SELECT * FROM users WHERE userid={userid}")
            if len(userdata) <= 0:
                self.database.query(f"INSERT INTO users (username, userid, firstname, lastname, banned, is_spam) VALUES('{username}', '{userid}', '{firstname}', '{lastname}', {banned}, {is_spam})", commit=True)
                self.database.query(f"INSERT INTO settings (userid, balance, lang, tokens) VALUES('{userid}', {balance}, '{lang}', {tokens})", commit=True)
                return True
            return False
        except:
            return False

    # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    def CheckUser(self, userid):
        userdata = self.database.query(f"SELECT * FROM users WHERE userid={userid}")
        if len(userdata) <= 0:
            return False
        else:
            return True

    # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
    async def process_start_command(self, message: types.Message):
        userid = message.from_user.id
        username = message.from_user.username
        firstname = message.from_user.first_name
        lastname = message.from_user.last_name

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É –≤ –ë–î, —Ç–æ  —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ
        if(not self.CheckUser(userid)):
            self.RegisterUser(username, userid, firstname, lastname)
        await message.reply(lang['RU_COMMAND_START'].format(bot_name=self.name_bot_command))

    # –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /pay
    async def pay_command_handler(self, message: types.Message):
        inline_kb = types.InlineKeyboardMarkup()
        inline_btn = types.InlineKeyboardButton(text='–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', url='https://www.sberbank.com/')
        inline_kb.add(inline_btn)
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç, –æ–ø–ª–∞—Ç–∏–≤ —Ç–∞—Ä–∏—Ñ '–ü–ª—é—Å' –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=inline_kb)

    def GetUserSettings(self, userid):
        userdata = self.database.query(f"SELECT * FROM settings WHERE userid={userid}")
        if len(userdata) <= 0:
            return {"result": userdata, "error": False}
        else:
            return {"result": userdata, "error": True}

    # –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /info
    async def info_command_handler(self, message: types.Message):
        user_id = message.from_user.id
        settings_user = self.GetUserSettings(user_id)

        if(settings_user["error"]):
            settings_user = settings_user["result"]

        balance = settings_user["balance"]
        lang = settings_user["lang"]
        tokens = settings_user["tokens"]
        text = f"üñ• –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\nüÜî –í–∞—à ID: {user_id};\nüôã‚Äç‚ôÇÔ∏è –í–∞—à–µ –∏–º—è: {message.from_user.username};\n\nüí∞ –û—Å—Ç–∞–ª–æ—Å—å: {balance}‚ÇΩ ~ {tokens} —Ç–æ–∫–µ–Ω–æ–≤;"
        await self.bot.send_message(chat_id=message.chat.id, text=text, reply_to_message_id=message.message_id)

    # –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    async def echo_message(self, message: types.Message):
        message_id = message.message_id
        rq = message.text
        userid = message.from_user.id
        username = message.from_user.username
        firstname = message.from_user.first_name
        lastname = message.from_user.last_name
        if not self.CheckUser(userid):
            self.RegisterUser(username, userid, firstname, lastname)

        #me = self.bot.get_me()
        #print(me.username)

        ## –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é:
        #if rq in ['–°–ø–∞—Å–∏–±–æ!', '–ë–ª–∞–≥–æ–¥–∞—Ä—é!', '–ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤—É—é!', '–ú–µ—Ä—Å–∏!', '–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ!', '–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ', '–°–ø–∞—Å–∏–±–æ', '–ë–ª–∞–≥–æ–¥–∞—Ä—é', '–ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤—É—é', '–ú–µ—Ä—Å–∏', '–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ', '–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ', '–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ,', '–°–ø–∞—Å–∏–±–æ,', '–ë–ª–∞–≥–æ–¥–∞—Ä—é,', '–ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤—É—é,', '–ú–µ—Ä—Å–∏,', '–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ,', '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç', '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!', '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!', '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.']:
        #    if message.reply_to_message and message.reply_to_message.from_user.username:
        #        #recipient_username = message.reply_to_message.from_user.username
        #        await self.bot.send_message(chat_id=message.chat.id, text=f"‚ù§Ô∏è @{me.username} –≤—ã—Ä–∞–∑–∏–ª(–∞) –í–∞–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å!", reply_to_message_id=message.reply_to_message.message_id)
        #        #print(f"(@{username} -> bot): {rq}\n(bot -> @{username}): ‚ù§Ô∏è @{me.username} –≤—ã—Ä–∞–∑–∏–ª(–∞) –í–∞–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å!")
        #        return

        # –ê–Ω–∏–º–∞—Ü–∏—è "–ü–µ—á–∞—Ç–∞–µ—Ç":
        await self.bot.send_chat_action(chat_id=message.chat.id, action='typing')
    
        # –° –∑–∞–ø—Ä–æ—Å–æ–º –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ "–ò–≤–∞–Ω–æ–≤":
        if self.name_bot_command in rq or f'{self.name_bot_command},' in rq:
            generated_text = self.chatgpt.getAnswer(message=rq, lang="ru", temperature=0.7, max_tokens=1000)
            await self.bot.send_message(chat_id=message.chat.id, text=generated_text["message"], reply_to_message_id=message_id)
            print(f"(@{username} -> bot): {rq}\n(bot -> @{username}): {generated_text['message']}")

>>>>>>> 60f5596e1a6ef75abf3adb3d0dc125e0aa6b11db
